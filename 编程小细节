1  问题1：判断两颗树是否相同；
问题2：判断一棵树是否镜像对称；    //从root拆成两个子树，然后左边的left和右边的right比较；
我想判断两颗树是否是一样的，势必要判断两个节点是否同时为空，不全为空的情况下怎么办？
bool isSameTree (TreeNode* p, TreeNode* q) {
  if (p || q) 
    return p == q;
  return p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right); 
}
//将可能为空的情况提取出来，然后判断是否都为空；


2  树的问题，一般可以使用返回值的，有以下几种情况：
（1）判断是否的；
（2）计算长度的；
（3）创建树的；
有返回值的一般利用起来是特别方便的：
问题1：计算树的高度：
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (!root) return 0;
        return max(maxDepth(root->left), maxDepth(root->right)) + 1;    //返回int或者bool都可以将左右的遍历放到return上；
    }
};
由此，判断高度平衡的算法是：
class Solution {
    int cal_height(TreeNode* root) {
        if (!root) return 0;
        return max(cal_height(root->left), cal_height(root->right)) + 1;  //这有递归；
    }
public:
    bool isBalanced(TreeNode* root) {
        if (!root) return true;
        if (abs(cal_height(root->left) - cal_height(root->right)) > 1) return false;
        return isBalanced(root->left) && isBalanced(root->right);                     //这也有递归；
    }
};
